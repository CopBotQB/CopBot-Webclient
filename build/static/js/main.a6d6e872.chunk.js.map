{"version":3,"sources":["index.js"],"names":["axios","require","offlineStateCounter","Loader","props","visible","class","NewlineText","text","split","length","slice","map","str","color","charAt","rx","match","replace","matcharr","substring","token","time","Date","now","parseInt","toFixed","UserRoster","setNewRID","document","getElementById","setState","rid","inputRef","current","value","goodDataLoaded","state","curDataLoaded","getOnlineState","get","then","res","data","console","log","i","Object","keys","entry","rosterid","roster","user","online","tabbedIn","tabbedin","editTimestamp","userStatus","username","stateText","catch","error","React","createRef","thisObject","this","setInterval","ref","type","id","placeholder","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.a6d6e872.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\n\nconst axios = require('axios')\n\nvar offlineStateCounter = {};\n\nfunction Loader(props) {\n\tif(props.visible) {\n\t\treturn (<div class=\"loadcontainer\"><div class=\"loader\"></div><p class=\"loadertext\">Loading database entries...</p></div>)\n\t} else {\n\t\treturn (<div class=\"loadcontainer\"></div>)\n\t}\n}\n\nfunction NewlineText(props) {\n\n  if(props.text.split('\\n').length < 2) {\n  \treturn <b>No users match this roster ID</b>\n  }\n  return props.text.split('\\n').slice(0, -1).map(str => {\n  \tconst color = str.charAt(1);\n\n\n  \tconst rx = /{([^}]+)}/gi;\n  \tvar match = str.match(rx)[0];\n  \tstr = str.replace(rx, \"\");\n  \tvar matcharr = match.substring(1,match.length-1).split(\":\");\n  \tmatch = matcharr[0];\n  \tvar token = matcharr[1];\n\n\n  \tvar time = ((Date.now() - parseInt(match))/1000).toFixed(1);\n\n\n\t  if(color === \"X\") {\n\t  \t if(time > 300) {\n\t  \t\treturn (<p class=\"pred large\"> <span class=\"dotr\"></span>{str.substring(3,str.length)} <p class=\"info-red\">This client has disconnected. Restart the client to reconnect.</p></p>);\n\t  \t} else {\n\t  \t\treturn (<p class=\"pred large\"> <span class=\"dotr\"></span>{str.substring(3,str.length)} <p class=\"info-red\">No data recieved for {time} seconds</p></p>);\n\t  \t}\n\t  } else if (color === \"-\") {\n\t  \treturn (<p class=\"pyellow large\"> <span class=\"doty\"></span>{str.substring(3,str.length)} <p class=\"info-yellow\">Tabbed out for {offlineStateCounter[token]} second(s).</p></p>);\n\t  } else if (color === \"+\") {\n\t  \treturn (<p class=\"pgreen large\"> <span class=\"dotg\"></span>{str.substring(3,str.length)} <p class=\"info-green\">Online and tabbed in!</p></p>);\n\t  }\n  \treturn (<p> {str}</p>)\n  });\n}\n\n\nclass UserRoster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {stateText: \"\", rid: \"\", goodDataLoaded:false, curDataLoaded:\"\"}\n    this.inputRef = React.createRef();\n\n  }\n\n\tcomponentDidMount() {\n\t\tvar thisObject = this;\n\t\tsetInterval(function(){ \n\t  \t\tthisObject.getOnlineState();\n\t\t}, 1000);\n\t\tsetInterval(function(){ \n\t  \t\tthisObject.setNewRID();\n\t\t}, 50);\n\t}\n\n\n\tsetNewRID = () => {\n\t\tdocument.getElementById('root')\n\t\tthis.setState({rid:this.inputRef.current.value, goodDataLoaded:this.inputRef.current.value === this.state.curDataLoaded})\n\t}\n\n  getOnlineState = () => {\n    axios.get('https://copbot-e0c62.firebaseio.com/.json')\n    .then(res => {\n      if(res.data != null) {\n      \tconsole.log(\"online state recieved\")\n      \tvar text = \"\";\n      \tfor(var i = 0; i < Object.keys(res.data).length; i++) {\n      \t\tvar token = Object.keys(res.data)[i]\n\t        var entry = res.data[token];\n\t        var rosterid = this.state.rid;\n\t\t\tthis.setState({curDataLoaded: rosterid})\n\n\t        if(entry.roster === rosterid) {\n\t        \n\t\t        var user = entry.user\n\t\t        var online = entry.online;\n\t\t        var tabbedIn = entry.tabbedin;\n\t\t        var editTimestamp = entry.editTimestamp;\n\n\n\t\t        var userStatus = \"\"\n\n\t\t        if(Date.now() - editTimestamp > 5000) {\n\t\t            userStatus = \"[X] Not connected -- \"\n\t\t            offlineStateCounter[token] = 0;\n\t\t        } else {\n\t\t            if(online) {\n\t\t              if(tabbedIn) {\n\t\t                userStatus = \"[+] Ready -- \"\n\t\t                offlineStateCounter[token] = 0;\n\t\t              } else {\n\t\t                userStatus = \"[-] Tabbed out -- \";\n\t\t                if(typeof offlineStateCounter[token] == \"undefined\")\n\t\t                \tofflineStateCounter[token] = 0;\n\t\t                offlineStateCounter[token] = offlineStateCounter[token] + 1;\n\t\t              }\n\t\t            } else {\n\t\t              userStatus = \"[X] Not connected -- \"\n\t\t              offlineStateCounter[token] = 0;\n\t\t            }\n\t\t          }\n\t\t        text = text + userStatus + user.username + \"{\" + editTimestamp + \":\" + token + \"}\\n\";\n\t        \n\t    \t}\n          \n        }\n        this.setState({stateText: text});\n      }\n    })\n    .catch(error => {\n      console.error(error)\n    })  \n  }\n\n  render() {\n\n  \treturn (<div class=\"login-page\">\n\n\t  <p class=\"TitleText\">CopBot Web Dashboard / Roster / {this.state.rid}</p>\n\t  <input ref={this.inputRef} type=\"text\" id=\"inputfield\" placeholder=\"Roster name\"></input>\n\t  <div class=\"form\">\n\t  <NewlineText text={this.state.stateText} />\n\t  <Loader visible={!this.state.goodDataLoaded ? 1 : 0} />\n\n\t  </div>\n\t</div>);\n  }\n}\n\n\n\n\nReactDOM.render(<UserRoster rosterid=\"\" />, document.getElementById('root'));"],"sourceRoot":""}